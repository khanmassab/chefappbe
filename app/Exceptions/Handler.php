<?php

namespace App\Exceptions;
use Throwable;
use Carbon\Carbon;
use Illuminate\Support\Str;
use Laravel\Passport\Token;
use PeterPetrus\Auth\PassportToken;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;

class Handler extends ExceptionHandler
{
    protected function unauthenticated($request, AuthenticationException $exception)
    {
      
        if(!isset($_SERVER['HTTP_AUTHORIZATION']))
        {
            return response()->json([
                'code' =>401,
                'message' => 'Invalid token'
            ]);
        }
        $httpAuthorization = '';
        if (isset($_SERVER['HTTP_AUTHORIZATION'])) {
            $httpAuthorization = $_SERVER['HTTP_AUTHORIZATION'];
        }
        if(Str::startsWith($httpAuthorization,'Bearer'))
        {
            $token = Str::substr($httpAuthorization,7);
            $tokenDec = new PassportToken($token);
            $accessToken = Token::where('id', $tokenDec->token_id)->first();
            
        
            if($accessToken) {
            $newToken = Token::where(['user_id' => $accessToken->user_id,'revoked' => 0])->first();
            if($newToken)
            {
                $expire = Carbon::parse($newToken->expires_at);
            
                $currentDatetime = Carbon::now();

                if($expire->greaterThan($currentDatetime)) {
                    return response()->json([
                        'code' => 463,
                        'message' => 'The current session has been ended as the new session is started on another device.'
                    ]);
                }
            }
               
            }
            if($accessToken && $accessToken->revoked == true)
            {
                return response()->json([
                    'code' =>463,
                    'message' => 'You are session has been  revoked please login'
                ]);
            }
            else
            {
            return response()->json([
                'code' =>499,
                'message' => 'You are session has been expired please login'
            ],499);
            }
             
        }
    
       return parent::render($request, $exception); // TODO: Change theautogenerated stub
    }
    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];


  
    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }
}
